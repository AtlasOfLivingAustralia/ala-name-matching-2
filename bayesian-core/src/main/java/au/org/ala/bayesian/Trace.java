package au.org.ala.bayesian;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import lombok.NonNull;

import java.util.ArrayList;
import java.util.List;

/**
 * Trace the processing and inference steps.
 * <p>
 * Implementers of the trace interface can be used to provide detailed information on exactly how
 * something is matched.
 * </p>
 * <p>
 * Traces form a stack-like structure.
 * However, you only need to access the top-level trace object; everything else is done to the current
 * trace object.
 * </p>
 */

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonPropertyOrder({"label", "value", "children"})
public class Trace {
    /** The operation described by the trace */
    @JsonProperty
    private String label;
    /** The final value generated by the operation being traced */
    @JsonProperty
    private Object value;
    /** The parent trace */
    @JsonIgnore
    private Trace parent;
    /** The current trace */
    @JsonIgnore
    private Trace current;
    /** The child traces */
    @JsonProperty
    private List<Trace> children;

    /**
     * Construct a top-level trace.
     */
    public Trace() {
        this.parent = this;
        this.current = this;
        this.label = "top";
    }

    /**
     * Construct a sub-trace
     *
     * @param parent The parent trace
     * @param label The trace label
     * @param value Any existing value
     */
    protected Trace(@NonNull Trace parent, @NonNull String label, Object value) {
        this();
        this.parent = parent;
        this.label = label;
        this.value = value;
    }

    /**
     * Add a child trace.
     *
     * @param trace The child trace
     */
    protected void add(Trace trace) {
        if (this.children == null)
            this.children = new ArrayList<>();
        this.children.add(trace);
    }

    /**
     * Add a leaf element to the trace
     *
     * @param label The leaf label
     * @param value The leaf value
     */
    public void add(String label, Object value) {
        Trace trace = new Trace(this.current, label, value);
        this.current.add(trace);
    }

    /**
     * Push a sub-trace and make it the current trace
     *
     * @param label The label for the trace operation
     */
    public void push(String label) {
        Trace trace = new Trace(this.current, label, null);
        this.current.add(trace);
        this.current = trace;
    }

    /**
     * Pop out of a sub-trace and back to the parent trace.
     */
    public void pop() {
        this.current = this.current.parent;
    }

    /**
     * Set the resulting value of the trace
     *
     * @param value The value to set
     */
    public void value(Object value) {
        this.current.value = value;
    }
}
