package au.org.ala.bayesian.generated;

import au.org.ala.bayesian.Classifier;
import au.org.ala.bayesian.InferenceException;
import au.org.ala.bayesian.ParameterAnalyser;
import au.org.ala.bayesian.StoreException;
import au.org.ala.names.builder.Builder;

import java.util.Arrays;
import java.util.Deque;
import java.util.Optional;

import au.org.ala.util.TaxonNameSoundEx;

public class Network9Builder implements Builder<Network9Parameters> {
  private TaxonNameSoundEx soundex;

  public Network9Builder() {
    this.soundex = new TaxonNameSoundEx();
  }

  @Override
  public void infer(Classifier classifier) throws InferenceException, StoreException {
    for (Object v: classifier.getAll(Network9Factory.v1)) {
      Object d = this.soundex.treatWord((String) v, "species");
      classifier.add(Network9Factory.v2, d);
    }
  }

    @Override
    public void expand(Classifier classifier, Deque<Classifier> parents) throws InferenceException, StoreException {
  }

  @Override
  public void calculate(Network9Parameters parameters, ParameterAnalyser analyser, Classifier classifier) throws InferenceException, StoreException {
    parameters.prior_t$v1 = analyser.computePrior(analyser.getObservation(true, Network9Factory.v1, classifier));
    parameters.inf_t_t$v2 = analyser.computeConditional(analyser.getObservation(true, Network9Factory.v2, classifier) , analyser.getObservation(true, Network9Factory.v1, classifier));
    parameters.inf_t_f$v2 = analyser.computeConditional(analyser.getObservation(true, Network9Factory.v2, classifier) , analyser.getObservation(false, Network9Factory.v1, classifier));
    parameters.inf_t_tt$v3 = analyser.computeConditional(analyser.getObservation(true, Network9Factory.v3, classifier) , analyser.getObservation(true, Network9Factory.v1, classifier), analyser.getObservation(true, Network9Factory.v2, classifier));
    parameters.inf_t_tf$v3 = analyser.computeConditional(analyser.getObservation(true, Network9Factory.v3, classifier) , analyser.getObservation(true, Network9Factory.v1, classifier), analyser.getObservation(false, Network9Factory.v2, classifier));
    parameters.inf_t_ft$v3 = analyser.computeConditional(analyser.getObservation(true, Network9Factory.v3, classifier) , analyser.getObservation(false, Network9Factory.v1, classifier), analyser.getObservation(true, Network9Factory.v2, classifier));
    parameters.inf_t_ff$v3 = analyser.computeConditional(analyser.getObservation(true, Network9Factory.v3, classifier) , analyser.getObservation(false, Network9Factory.v1, classifier), analyser.getObservation(false, Network9Factory.v2, classifier));
  }
}
