package au.org.ala.bayesian.generated;

import au.org.ala.bayesian.ClassificationMatcher;
import au.org.ala.bayesian.ClassifierSearcher;
import au.org.ala.bayesian.Analyser;
import au.org.ala.bayesian.NetworkFactory;
import au.org.ala.bayesian.Normaliser;
import au.org.ala.bayesian.Observable;
import static au.org.ala.bayesian.ExternalContext.*;

import java.net.URI;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class Network9Factory implements NetworkFactory<Network9Classification, Network9Parameters, Network9Inferencer, Network9Factory> {
    private static Network9Factory instance = null;


  public static final Observable v1 = new Observable(
      "v_1",
      null,
      java.lang.String.class,
      Observable.Style.CANONICAL,
      null,
      false
    );
  public static final Observable v2 = new Observable(
      "v_2",
      null,
      java.lang.String.class,
      Observable.Style.CANONICAL,
      null,
      false
    );
  public static final Observable v3 = new Observable(
      "v_3",
      null,
      java.lang.String.class,
      Observable.Style.CANONICAL,
      null,
      false
    );

  public static List<Observable> OBSERVABLES = Collections.unmodifiableList(Arrays.asList(
    v1,
    v2,
    v3
  ));

  static {
    v1.setExternal(LUCENE, "v_1");
    v2.setExternal(LUCENE, "v_2");
    v3.setExternal(LUCENE, "v_3");
  }

  @Override
  public List<Observable> getObservables() {
      return OBSERVABLES;
  }

  @Override
  public Network9Classification createClassification() {
      return new Network9Classification();
  }

  @Override
  public Network9Inferencer createInferencer() {
      return new Network9Inferencer();
  }

  @Override
  public Network9Parameters createParameters() {
        return new Network9Parameters();
  }

  @Override
  public Analyser<Network9Classification> createAnalyser(){
        return new au.org.ala.bayesian.NullAnalyser();
  }

  @Override
  public au.org.ala.test.TestMatcher createMatcher(ClassifierSearcher searcher) {
        return new au.org.ala.test.TestMatcher(this,searcher);
  }

  public static Network9Factory instance() {
      if (instance == null) {
          synchronized (Network9Factory.class) {
              if (instance == null) {
                  instance = new Network9Factory();
              }
          }
      }
      return instance;
  }
}
