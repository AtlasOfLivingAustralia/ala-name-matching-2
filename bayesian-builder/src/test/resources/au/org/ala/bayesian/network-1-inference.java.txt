package au.org.ala.bayesian.generated;

import au.org.ala.bayesian.Analyser;
import au.org.ala.bayesian.Classifier;
import au.org.ala.bayesian.Inference;
import au.org.ala.bayesian.InferenceException;
import au.org.ala.bayesian.Inferencer;
import au.org.ala.bayesian.StoreException;

import java.util.HashMap;
import java.util.Map;


public class Network1Inferencer implements Inferencer<Network1Classification> {
  private Map<String, Inferencer<Network1Classification>> subInferencers;

  // Assumed to be stateless
  private static final Inferencer<Network1Classification>[] INFERENCERS = new Inferencer[] {
    new Network1Inferencer_()
  };

  public Network1Inferencer() {
    this.subInferencers = new HashMap<>(INFERENCERS.length);
    for (Inferencer<Network1Classification> i: INFERENCERS)
      this.subInferencers.put(i.getSignature(), i);
  }

  @Override
  public String getSignature() {
    return null;
  }

  @Override
  public Inference probability(Network1Classification classification, Classifier classifier) throws StoreException, InferenceException {
    Inferencer<Network1Classification> sub = this.subInferencers.get(classifier.getSignature());
    if (sub == null)
      throw new IllegalArgumentException("Signature '" + classifier.getSignature() + "' is not recognised");
    return sub.probability(classification, classifier);
  }

  public static class Evidence {
    public Boolean e$v1;

    public boolean isT$e$v1() {
      return this.e$v1 == null || this.e$v1;
    }

    public boolean isF$e$v1() {
      return this.e$v1 == null || !this.e$v1;
    }

  }
}