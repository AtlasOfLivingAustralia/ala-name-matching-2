package au.org.ala.bayesian.generated;

import au.org.ala.bayesian.Analyser;
import au.org.ala.bayesian.Classifier;
import au.org.ala.bayesian.Inference;
import au.org.ala.bayesian.InferenceException;
import au.org.ala.bayesian.Inferencer;
import au.org.ala.bayesian.StoreException;

public class Network3Inferencer_ implements Inferencer<Network3Classification> {
  public final static String SIGNATURE = "";

  private ThreadLocal<Network3Parameters_> parameters = ThreadLocal.withInitial(() -> new Network3Parameters_());

  public Network3Inferencer_() {
  }

  @Override
  public String getSignature() {
    return SIGNATURE;
  }

  public double infer(Network3Inferencer.Evidence evidence, Network3Parameters_ parameters, double c$v1) {
    double nc$v1 = 1.0 - c$v1;
    double c$v2 = evidence.isT$e$v2() ? 1.0 : 0.0;
    double nc$v2 = evidence.isF$e$v2() ? 1.0 : 0.0;
    double c$v3 = 0.0;
    double nc$v3 = 0.0;
    // Ignoring non-base v_2
    if (evidence.isT$e$v3()) {
      c$v3 += parameters.derived_t_tt$v3 * c$v2 * c$v1;
      c$v3 += parameters.derived_t_tf$v3 * c$v2 * nc$v1;
      c$v3 += parameters.derived_t_ft$v3 * nc$v2 * c$v1;
      c$v3 += parameters.derived_t_ff$v3 * nc$v2 * nc$v1;
    }
    if (evidence.isF$e$v3()) {
      nc$v3 += parameters.derived_f_tt$v3 * c$v2 * c$v1;
      nc$v3 += parameters.derived_f_tf$v3 * c$v2 * nc$v1;
      nc$v3 += parameters.derived_f_ft$v3 * nc$v2 * c$v1;
      nc$v3 += parameters.derived_f_ff$v3 * nc$v2 * nc$v1;
    }
    return (c$v3 + nc$v3) * (parameters.prior_t$v1 * c$v1 + parameters.prior_f$v1 * nc$v1);
  }

  public Inference probability(Network3Inferencer.Evidence evidence, Network3Parameters_ parameters) {
    double p;
    double prior = parameters.prior_t$v1;
    double ph = 0.0;
    double pe = 0.0;

    p = (evidence.isT$e$v1() ? 1.0 : 0.0) * this.infer(evidence, parameters, 1.0);
    ph += p;
    pe += p;
    p = (evidence.isF$e$v1() ? 1.0 : 0.0) * this.infer(evidence, parameters, 0.0);
    pe += p;
    return Inference.forPEH(prior, pe, ph);
  }

  @Override
  public Inference probability(Network3Classification classification, Classifier classifier) throws StoreException, InferenceException {
    Network3Inferencer.Evidence evidence = classification.match(classifier);
    Network3Parameters_ params = this.parameters.get();
    classifier.loadParameters(params);
    return this.probability(evidence, params);
  }

}