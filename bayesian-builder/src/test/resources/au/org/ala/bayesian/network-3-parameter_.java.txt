package au.org.ala.bayesian.generated;

import au.org.ala.bayesian.InferenceException;
import au.org.ala.bayesian.ParameterAnalyser;
import au.org.ala.bayesian.Parameters;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

@JsonPropertyOrder(alphabetic = true)
public class Network3Parameters_ implements Parameters {

  public final static String SIGNATURE = "";

  public double prior_v1_t; // v_1 prior probability
  public double prior_v1_f; // 1 - v_1 prior probability
  public double inf_v2_t$t; // p(v_2 | v_1) conditional probability
  public double inf_v2_f$t; // p(¬v_2 | v_1) =  1 - p(v_2 | v_1) conditional probability
  public double inf_v2_t$f; // p(v_2 | ¬v_1) conditional probability
  public double inf_v2_f$f; // p(¬v_2 | ¬v_1) =  1 - p(v_2 | ¬v_1) conditional probability
  public double inf_v3_t$t_t; // p(v_3 | v_1, v_2) conditional probability
  public double inf_v3_f$t_t; // p(¬v_3 | v_1, v_2) =  1 - p(v_3 | v_1, v_2) conditional probability
  public double inf_v3_t$t_f; // p(v_3 | v_1, ¬v_2) conditional probability
  public double inf_v3_f$t_f; // p(¬v_3 | v_1, ¬v_2) =  1 - p(v_3 | v_1, ¬v_2) conditional probability
  public double inf_v3_t$f_t; // p(v_3 | ¬v_1, v_2) conditional probability
  public double inf_v3_f$f_t; // p(¬v_3 | ¬v_1, v_2) =  1 - p(v_3 | ¬v_1, v_2) conditional probability
  public double inf_v3_t$f_f; // p(v_3 | ¬v_1, ¬v_2) conditional probability
  public double inf_v3_f$f_f; // p(¬v_3 | ¬v_1, ¬v_2) =  1 - p(v_3 | ¬v_1, ¬v_2) conditional probability
  public double derived_v3_t$t_t; // p(v_3 | v_1, v_2) = p(v_3 | v_1, v_2).p(v_2 | v_1)  derived conditional probability
  public double derived_v3_f$t_t; // p(¬v_3 | v_1, v_2) = p(¬v_3 | v_1, v_2).p(v_2 | v_1)  derived conditional probability
  public double derived_v3_t$t_f; // p(v_3 | v_1, ¬v_2) = p(v_3 | v_1, ¬v_2).p(¬v_2 | v_1)  derived conditional probability
  public double derived_v3_f$t_f; // p(¬v_3 | v_1, ¬v_2) = p(¬v_3 | v_1, ¬v_2).p(¬v_2 | v_1)  derived conditional probability
  public double derived_v3_t$f_t; // p(v_3 | ¬v_1, v_2) = p(v_3 | ¬v_1, v_2).p(v_2 | ¬v_1)  derived conditional probability
  public double derived_v3_f$f_t; // p(¬v_3 | ¬v_1, v_2) = p(¬v_3 | ¬v_1, v_2).p(v_2 | ¬v_1)  derived conditional probability
  public double derived_v3_t$f_f; // p(v_3 | ¬v_1, ¬v_2) = p(v_3 | ¬v_1, ¬v_2).p(¬v_2 | ¬v_1)  derived conditional probability
  public double derived_v3_f$f_f; // p(¬v_3 | ¬v_1, ¬v_2) = p(¬v_3 | ¬v_1, ¬v_2).p(¬v_2 | ¬v_1)  derived conditional probability

  public Network3Parameters_() {
  }

  @Override
  public void load(double[] vector) {
    this.prior_v1_t = vector[0];
    this.inf_v2_t$t = vector[1];
    this.inf_v2_t$f = vector[2];
    this.inf_v3_t$t_t = vector[3];
    this.inf_v3_t$t_f = vector[4];
    this.inf_v3_t$f_t = vector[5];
    this.inf_v3_t$f_f = vector[6];
    this.build();
  }

  @Override
  public double[] store() {
    double[] vector = new double[7];

    vector[0] = this.prior_v1_t;
    vector[1] = this.inf_v2_t$t;
    vector[2] = this.inf_v2_t$f;
    vector[3] = this.inf_v3_t$t_t;
    vector[4] = this.inf_v3_t$t_f;
    vector[5] = this.inf_v3_t$f_t;
    vector[6] = this.inf_v3_t$f_f;
    return vector;
  }

  public void build() {
    this.prior_v1_f = 1.0 - this.prior_v1_t;
    this.inf_v2_f$t = 1.0 - this.inf_v2_t$t;
    this.inf_v2_f$f = 1.0 - this.inf_v2_t$f;
    this.inf_v3_f$t_t = 1.0 - this.inf_v3_t$t_t;
    this.inf_v3_f$t_f = 1.0 - this.inf_v3_t$t_f;
    this.inf_v3_f$f_t = 1.0 - this.inf_v3_t$f_t;
    this.inf_v3_f$f_f = 1.0 - this.inf_v3_t$f_f;
    this.derived_v3_t$t_t = this.inf_v3_t$t_t * this.inf_v2_t$t;
    this.derived_v3_f$t_t = this.inf_v3_f$t_t * this.inf_v2_t$t;
    this.derived_v3_t$t_f = this.inf_v3_t$t_f * this.inf_v2_f$t;
    this.derived_v3_f$t_f = this.inf_v3_f$t_f * this.inf_v2_f$t;
    this.derived_v3_t$f_t = this.inf_v3_t$f_t * this.inf_v2_t$f;
    this.derived_v3_f$f_t = this.inf_v3_f$f_t * this.inf_v2_t$f;
    this.derived_v3_t$f_f = this.inf_v3_t$f_f * this.inf_v2_f$f;
    this.derived_v3_f$f_f = this.inf_v3_f$f_f * this.inf_v2_f$f;
  }

}