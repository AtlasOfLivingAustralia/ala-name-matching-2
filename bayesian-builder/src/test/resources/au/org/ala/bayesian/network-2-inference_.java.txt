package au.org.ala.bayesian.generated;

import au.org.ala.bayesian.BayesianException;
import au.org.ala.bayesian.Analyser;
import au.org.ala.bayesian.Classifier;
import au.org.ala.bayesian.Inference;
import au.org.ala.bayesian.Inferencer;
import au.org.ala.bayesian.Trace;
import au.org.ala.bayesian.Trace.TraceLevel;

public class Network2Inferencer_ implements Inferencer<Network2Classification> {
  public final static String SIGNATURE = "";

  public Network2Inferencer_() {
  }

  @Override
  public String getSignature() {
    return SIGNATURE;
  }

  public double infer_t(Network2Inferencer.Evidence evidence, Network2Parameters_ parameters, Trace trace) {
    double c$v1 = 1.0;
    double nc$v1 = 0.0;
    double c$v2 = 0.0;
    double nc$v2 = 0.0;
    if (evidence.isT$e$v2()) {
      c$v2 += parameters.inf_v2_t$t * c$v1;
      if (trace != null) {
        String val_ = this.formatDouble(parameters.inf_v2_t$t) + " \u00b7 " + this.formatDouble(c$v1);
        trace.add(TraceLevel.TRACE, "p(v_2) - v_2", "p(v_2 | v_1)·v_1", val_, c$v2);
      }
    }
    if (evidence.isF$e$v2()) {
      nc$v2 += parameters.inf_v2_f$t * c$v1;
      if (trace != null) {
        String val_ = this.formatDouble(parameters.inf_v2_f$t) + " \u00b7 " + this.formatDouble(c$v1);
        trace.add(TraceLevel.TRACE, "p(¬v_2) - v_2", "p(¬v_2 | v_1)·v_1", val_, nc$v2);
      }
    }
    double result_ = (c$v2 + nc$v2);
    if (trace != null) {
      String val_ = "(" + this.formatDouble(c$v2) + " + " + this.formatDouble(nc$v2) + ")";
      trace.add(TraceLevel.TRACE, "c(E | v_1)", "(p(v_2) + p(¬v_2))", val_, result_);
    }
    return result_;
  }

  public double infer_f(Network2Inferencer.Evidence evidence, Network2Parameters_ parameters, Trace trace) {
    double c$v1 = 0.0;
    double nc$v1 = 1.0;
    double c$v2 = 0.0;
    double nc$v2 = 0.0;
    if (evidence.isT$e$v2()) {
      c$v2 += parameters.inf_v2_t$f * nc$v1;
      if (trace != null) {
        String val_ = this.formatDouble(parameters.inf_v2_t$f) + " \u00b7 " + this.formatDouble(nc$v1);
        trace.add(TraceLevel.TRACE, "p(v_2) - v_2", "p(v_2 | ¬v_1)·¬v_1", val_, c$v2);
      }
    }
    if (evidence.isF$e$v2()) {
      nc$v2 += parameters.inf_v2_f$f * nc$v1;
      if (trace != null) {
        String val_ = this.formatDouble(parameters.inf_v2_f$f) + " \u00b7 " + this.formatDouble(nc$v1);
        trace.add(TraceLevel.TRACE, "p(¬v_2) - v_2", "p(¬v_2 | ¬v_1)·¬v_1", val_, nc$v2);
      }
    }
    double result_ = (c$v2 + nc$v2);
    if (trace != null) {
      String val_ = "(" + this.formatDouble(c$v2) + " + " + this.formatDouble(nc$v2) + ")";
      trace.add(TraceLevel.TRACE, "c(E | ¬v_1)", "(p(v_2) + p(¬v_2))", val_, result_);
    }
    return result_;
  }


  public Inference probability(Network2Inferencer.Evidence evidence, Network2Parameters_ parameters, Trace trace) {
    double c, p;
    double prior = parameters.prior_v1_t;
    double ph = 0.0;
    double pe = 0.0;

    if (trace != null)
        trace.push(TraceLevel.TRACE, "p(v_1)");
    try {
        if (evidence.isT$e$v1()) {
          c = this.infer_t(evidence, parameters, trace);
          p = c  * parameters.prior_v1_t;
          if (trace != null) {
            trace.value(TraceLevel.TRACE, "c(E | v_1)\u00b7p(v_1)", this.formatDouble(c) +  " \u00b7 " + this.formatDouble(parameters.prior_v1_t), p);
          }
          ph += p;
          pe += p;
        }
    } finally {
        if (trace != null)
            trace.pop(TraceLevel.TRACE);
    }
    if (trace != null)
        trace.push(TraceLevel.TRACE, "p(¬v_1)");
    try {
        if (evidence.isF$e$v1()) {
          c = this.infer_f(evidence, parameters, trace);
          p = c  * parameters.prior_v1_f;
          if (trace != null) {
            trace.value(TraceLevel.TRACE, "c(E | ¬v_1)\u00b7p(¬v_1)", this.formatDouble(c) +  " \u00b7 " + this.formatDouble(parameters.prior_v1_f), p);
          }
          pe += p;
        }
    } finally {
        if (trace != null)
            trace.pop(TraceLevel.TRACE);
    }
    return Inference.forPEH(prior, pe, ph);
  }

  @Override
  public Inference probability(Network2Classification classification, Classifier classifier, Trace trace) throws BayesianException {
    if (trace != null)
        trace.push(TraceLevel.TRACE, "inference");
    try {
        Network2Inferencer.Evidence evidence = classification.match(classifier);
        if (trace != null)
            trace.add(TraceLevel.TRACE, "evidence", evidence);
        Network2Parameters_ params = (Network2Parameters_) classifier.getCachedParameters();
        if (params == null) {
          params = new Network2Parameters_();
          classifier.loadParameters(params);
        }
        return this.probability(evidence, params, trace);
    } finally {
        if (trace != null)
            trace.pop(TraceLevel.TRACE);
    }
  }
}