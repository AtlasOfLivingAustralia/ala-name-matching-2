package au.org.ala.bayesian.generated;

import au.org.ala.bayesian.Analyser;
import au.org.ala.bayesian.Classifier;
import au.org.ala.bayesian.Inference;
import au.org.ala.bayesian.InferenceException;
import au.org.ala.bayesian.Inferencer;
import au.org.ala.bayesian.StoreException;

public class Network2Inferencer_ implements Inferencer<Network2Classification> {
  public final static String SIGNATURE = "";

  private ThreadLocal<Network2Parameters_> parameters = ThreadLocal.withInitial(() -> new Network2Parameters_());

  public Network2Inferencer_() {
  }

  @Override
  public String getSignature() {
    return SIGNATURE;
  }

  public double infer_t(Network2Inferencer.Evidence evidence, Network2Parameters_ parameters) {
    double c$v1 = 1.0;
    double nc$v1 = 0.0;
    double c$v2 = 0.0;
    double nc$v2 = 0.0;
    if (evidence.isT$e$v2()) {
      c$v2 += parameters.inf_v2_t$t * c$v1;
    }
    if (evidence.isF$e$v2()) {
      nc$v2 += parameters.inf_v2_f$t * c$v1;
    }
    return (c$v2 + nc$v2);
  }

  public double infer_f(Network2Inferencer.Evidence evidence, Network2Parameters_ parameters) {
    double c$v1 = 0.0;
    double nc$v1 = 1.0;
    double c$v2 = 0.0;
    double nc$v2 = 0.0;
    if (evidence.isT$e$v2()) {
      c$v2 += parameters.inf_v2_t$f * nc$v1;
    }
    if (evidence.isF$e$v2()) {
      nc$v2 += parameters.inf_v2_f$f * nc$v1;
    }
    return (c$v2 + nc$v2);
  }


  public Inference probability(Network2Inferencer.Evidence evidence, Network2Parameters_ parameters) {
    double p;
    double prior = parameters.prior_v1_t;
    double ph = 0.0;
    double pe = 0.0;

    if (evidence.isT$e$v1()) {
      p = this.infer_t(evidence, parameters) * parameters.prior_v1_t;
      ph += p;
      pe += p;
    }
    if (evidence.isF$e$v1()) {
      p = this.infer_f(evidence, parameters) * parameters.prior_v1_f;
      pe += p;
    }
    return Inference.forPEH(prior, pe, ph);
  }

  @Override
  public Inference probability(Network2Classification classification, Classifier classifier) throws StoreException, InferenceException {
    Network2Inferencer.Evidence evidence = classification.match(classifier);
    Network2Parameters_ params = this.parameters.get();
    classifier.loadParameters(params);
    return this.probability(evidence, params);
  }

}