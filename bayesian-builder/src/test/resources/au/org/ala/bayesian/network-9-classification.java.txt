package au.org.ala.bayesian.generated;

import au.org.ala.bayesian.Analyser;
import au.org.ala.bayesian.BayesianException;
import au.org.ala.bayesian.Classification;
import au.org.ala.bayesian.Classifier;
import au.org.ala.bayesian.Fidelity;
import au.org.ala.bayesian.Hints;
import au.org.ala.bayesian.InferenceException;
import au.org.ala.bayesian.Issues;
import au.org.ala.bayesian.Observable;
import au.org.ala.bayesian.Observation;
import au.org.ala.bayesian.fidelity.CompositeFidelity;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.function.Function;

import lombok.SneakyThrows;
import org.gbif.dwc.terms.DwcTerm;
import org.gbif.dwc.terms.Term;

import au.org.ala.bayesian.analysis.StringAnalysis;
import au.org.ala.bayesian.Analyser;
import au.org.ala.bayesian.derivation.SoundexGenerator;

public class Network9Classification implements Classification<Network9Classification> {
  private Issues issues;
  private Hints<Network9Classification> hints;

  private SoundexGenerator soundex;

  public java.lang.String v1;
  public java.lang.String v2;
  public java.lang.String v3;

  public Network9Classification() {
    this.issues = new Issues();
    this.hints = new Hints<>();
    this.soundex = new SoundexGenerator();
  }

  public Network9Classification(Classifier classifier) throws BayesianException {
    this();
    this.read(classifier, true);
  }

  @Override
  @SneakyThrows
  public Network9Classification clone() {
      Network9Classification clone = (Network9Classification) super.clone();
      clone.issues = new Issues(this.issues);
      return clone;
  }

  @Override
  public void addIssue(Term issue) {
    this.issues = this.issues.with(issue);
  }

  @Override
  public void addIssues(Issues issues) {
        this.issues = this.issues.merge(issues);
  }

  @Override
  public Hints<Network9Classification> getHints() {
    return this.hints;
  }

  @Override
  public <T> void addHint(Observable observable, T value) {
        this.hints.addHint(observable, value);
  }

  @Override
  public Term getType() {
    return Network9Factory.CONCEPT;
  }

  @Override
  public Issues getIssues() {
    return this.issues;
  }


  @Override
  public String getIdentifier() {
    return null;
  }

  @Override
  public String getName() {
    return null;
  }

  @Override
  public String getParent() {
    return null;
  }

  @Override
  public String getAccepted() {
    return null;
  }

  @Override
  public Collection<Observation> toObservations() {
    Collection<Observation> obs = new ArrayList(3);

    if (this.v1 != null)
      obs.add(new Observation(true, Network9Factory.v1, this.v1));
    if (this.v2 != null)
      obs.add(new Observation(true, Network9Factory.v2, this.v2));
    if (this.v3 != null)
      obs.add(new Observation(true, Network9Factory.v3, this.v3));
    return obs;
  }

  @Override
  public void inferForSearch(Analyser<Network9Classification> analyser) throws BayesianException {
    this.v1 = Network9Factory.v1.analyse(this.v1);
    this.v2 = Network9Factory.v2.analyse(this.v2);
    this.v3 = Network9Factory.v3.analyse(this.v3);
    analyser.analyseForSearch(this);
    if (this.v2 == null) {
      this.v2 = this.soundex.soundex(this.v1);
    }
  }

  @Override
  public Fidelity<Network9Classification> buildFidelity(Network9Classification actual) throws InferenceException {
    CompositeFidelity<Network9Classification> fidelity = new CompositeFidelity<>(this, actual);
    if (this.v1 != null)
      fidelity.add(Network9Factory.v1.getAnalysis().buildFidelity(this.v1, actual.v1));
    if (this.v2 != null)
      fidelity.add(Network9Factory.v2.getAnalysis().buildFidelity(this.v2, actual.v2));
    if (this.v3 != null)
      fidelity.add(Network9Factory.v3.getAnalysis().buildFidelity(this.v3, actual.v3));
    return fidelity;
  }

  @Override
  public List<List<Function<Network9Classification, Network9Classification>>> searchModificationOrder() {
        List<List<Function<Network9Classification, Network9Classification>>> modifications = new ArrayList();
    return modifications;
  }

  @Override
  public List<List<Function<Network9Classification, Network9Classification>>> matchModificationOrder() {
    List<List<Function<Network9Classification, Network9Classification>>> modifications = new ArrayList();
    return modifications;
  }


  @Override
  public List<List<Function<Network9Classification, Network9Classification>>> hintModificationOrder() {
    List<List<Function<Network9Classification, Network9Classification>>> modifications = new ArrayList();
    this.hints.buildModifications(Network9Factory.v1, java.lang.String.class, (c, v) -> { c.v1 = v; }, modifications);
    this.hints.buildModifications(Network9Factory.v2, java.lang.String.class, (c, v) -> { c.v2 = v; }, modifications);
    this.hints.buildModifications(Network9Factory.v3, java.lang.String.class, (c, v) -> { c.v3 = v; }, modifications);
    return modifications;
  }

  @Override
  public void read(Classifier classifier, boolean overwrite) throws BayesianException {
    if (overwrite || this.v1 == null) {
      this.v1 = classifier.get(Network9Factory.v1);
    }
    if (overwrite || this.v2 == null) {
      this.v2 = classifier.get(Network9Factory.v2);
    }
    if (overwrite || this.v3 == null) {
      this.v3 = classifier.get(Network9Factory.v3);
    }
  }

  @Override
  public void write(Classifier classifier, boolean overwrite) throws BayesianException {
    if(overwrite){
      classifier.clear(Network9Factory.v1);
      classifier.clear(Network9Factory.v2);
      classifier.clear(Network9Factory.v3);
    }
    classifier.add(Network9Factory.v1, this.v1, false, false);
    classifier.add(Network9Factory.v2, this.v2, false, false);
    classifier.add(Network9Factory.v3, this.v3, false, false);
  }


  public Network9Inferencer.Evidence match(Classifier classifier) throws BayesianException {
    Network9Inferencer.Evidence evidence = new Network9Inferencer.Evidence();
    evidence.e$v1 = classifier.match(this.v1, Network9Factory.v1);
    evidence.e$v2 = classifier.match(this.v2, Network9Factory.v2);
    evidence.e$v3 = classifier.match(this.v3, Network9Factory.v3);
    return evidence;
  }

}